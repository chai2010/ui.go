//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	genCommonCFiles()
	genDarwinCppFiles()
	genLinuxCppFiles()
	genWindowsCppFiles()
}

func genCommonCFiles() {
	matches, err := filepath.Glob("internal/libui/common/*.c")
	if err != nil {
		panic(err)
	}

	for _, s := range matches {
		if strings.Contains(s, "OLD_") {
			continue // skip OLD_*.c
		}
		newname := fmt.Sprintf("zz_libui_common_%s", filepath.Base(s))
		code := fmt.Sprintf("#include \"./internal/libui/common/%s\"", filepath.Base(s))
		code += fmt.Sprintln()
		os.WriteFile(newname, []byte(code), 0666)
	}
}

func genDarwinCppFiles() {
	matches, err := filepath.Glob("internal/libui/darwin/*.m")
	if err != nil {
		panic(err)
	}

	for _, s := range matches {
		if strings.Contains(s, "OLD_") {
			continue // skip OLD_*.m
		}
		newname := fmt.Sprintf("zz_libui_darwin_%s", filepath.Base(s))
		code := "// Auto generated by gen.go, DONOT EDIT!!!\n\n"
		code += fmt.Sprintln("// +build darwin")
		code += fmt.Sprintln("//go:build darwin")
		code += fmt.Sprintln()
		code += fmt.Sprintf("#include \"./internal/libui/darwin/%s\"", filepath.Base(s))
		code += fmt.Sprintln()
		os.WriteFile(newname, []byte(code), 0666)
	}
}

func genLinuxCppFiles() {
	matches, err := filepath.Glob("internal/libui/unix/*.c")
	if err != nil {
		panic(err)
	}

	for _, s := range matches {
		if strings.Contains(s, "OLD_") {
			continue // skip OLD_*.c
		}
		newname := fmt.Sprintf("zz_libui_linux_%s", filepath.Base(s))
		code := "// Auto generated by gen.go, DONOT EDIT!!!\n\n"
		code += fmt.Sprintln("// +build linux")
		code += fmt.Sprintln("//go:build linux")
		code += fmt.Sprintln()
		code += fmt.Sprintf("#include \"./internal/libui/unix/%s\"", filepath.Base(s))
		code += fmt.Sprintln()
		os.WriteFile(newname, []byte(code), 0666)
	}
}

func genWindowsCppFiles() {
	matches, err := filepath.Glob("internal/libui/windows/*.cpp")
	if err != nil {
		panic(err)
	}

	for _, s := range matches {
		newname := fmt.Sprintf("zz_libui_windows_%s", filepath.Base(s))
		code := "// Auto generated by gen.go, DO NOT EDIT!!!\n\n"
		code += fmt.Sprintln("// +build windows")
		code += fmt.Sprintln("//go:build windows")
		code += fmt.Sprintln()
		code += fmt.Sprintf("#include \"./internal/libui/windows/%s\"", filepath.Base(s))
		code += fmt.Sprintln()
		os.WriteFile(newname, []byte(code), 0666)
	}
}
